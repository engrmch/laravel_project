name: Deploy Laravel to EC2 via CodeDeploy

on:
  push:
    branches:
      - main # <<< IMPORTANT: Change this to your main development/deployment branch (e.g., 'master', 'production')
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub Actions tab

jobs:
  deploy:
    runs-on: ubuntu-latest # Or your preferred runner environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Use actions/checkout@v3 or @v4 for latest features

      # Optional: Install Composer dependencies if you want to include 'vendor' in your deployment bundle.
      # If your deploy.sh handles 'composer install' on the EC2 instance, you can skip this to keep the artifact small.
      - name: Install Composer dependencies (Optional, check your deploy.sh)
        # if: ${{ false }} # Uncomment and set to true to enable this step
        # run: composer install --no-dev --prefer-dist

      # Optional: Install Node.js dependencies and compile assets if you have frontend build process.
      # If your deploy.sh handles 'npm install' and 'npm run build' on the EC2, you can skip this.
      - name: Install Node.js dependencies and compile assets (Optional, check your deploy.sh)
        # if: ${{ false }} # Uncomment and set to true to enable this step
        # run: |
        #   npm install
        #   npm run build

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          # Create a temporary directory for packaging the final bundle
          mkdir deployment-package

          # Copy appspec.yml to the root of the deployment package
          cp appspec.yml deployment-package/appspec.yml
          echo "Copied appspec.yml"

          # Copy the scripts directory to the root of the deployment package
          # THIS IS THE CRUCIAL PART FOR RESOLVING YOUR SCRIPT MISSING ERROR
          if [ -d "scripts" ]; then
            cp -r scripts deployment-package/scripts
            echo "Copied scripts directory"
          else
            echo "WARNING: 'scripts' directory not found at repo root. Deployment may fail!"
            exit 1 # Fail the workflow if scripts directory is missing
          fi

          # Copy your Laravel application files into a subfolder (e.g., 'laravel_project')
          # This subfolder name MUST match the 'destination' in your appspec.yml
          # For your appspec.yml: destination: /var/www/html/laravel_project
          echo "Copying Laravel application files to laravel_project/..."
          rsync -av --progress \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='.env*' \
            --exclude='vendor' \
            . deployment-package/laravel_project/
          echo "Finished copying Laravel application files."

          # Navigate into the temporary directory and zip its contents
          cd deployment-package
          zip -r ../deployment_bundle.zip ./*
          echo "Created deployment_bundle.zip"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # This uses a GitHub Secret
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # This uses a GitHub Secret
          aws-region: ap-southeast-2 # <<< IMPORTANT: Change this to YOUR AWS Region (e.g., us-east-1, eu-west-1, ap-southeast-2)

      - name: Upload deployment package to S3
        run: |
          aws s3 cp deployment_bundle.zip s3://YOUR_S3_BUCKET_NAME/deployment_bundle.zip # <<< IMPORTANT: Change this to YOUR S3 bucket name
        env:
          AWS_PAGER: "" # Prevents AWS CLI from paging output, good for CI/CD

      - name: Deploy to EC2 with AWS CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name LaravelProject \
            --deployment-group-name SVEN_Test \
            --s3-location bucket=YOUR_S3_BUCKET_NAME,key=deployment_bundle.zip,bundleType=zip \
            --deployment-config-name CodeDeployDefault.AllAtOnce # Or CodeDeployDefault.HalfAtATime, etc.
        env:
          AWS_PAGER: "" # Prevents AWS CLI from paging output
